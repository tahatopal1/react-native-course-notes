### Flexbox in React Native

#### Key Overview

* **Every `<View>` in React Native uses Flexbox by default**
* Default `flexDirection`: `'column'` (vertical stacking)
* Flexbox is used to **position, size, and align components** in a one-dimensional layout

---

### Axes in Flexbox

| Axis Type      | Depends on `flexDirection` |
| -------------- | -------------------------- |
| **Main Axis**  | Direction of content flow  |
| **Cross Axis** | Perpendicular to main axis |

| `flexDirection`    | Main Axis    | Cross Axis   |
| ------------------ | ------------ | ------------ |
| `row`              | left → right | top → bottom |
| `row-reverse`      | right → left | top → bottom |
| `column` (default) | top → bottom | left → right |
| `column-reverse`   | bottom → top | left → right |

---

### Layout Properties

#### `flexDirection`

* Controls **direction** of child layout

```js
flexDirection: 'row' | 'column' | 'row-reverse' | 'column-reverse'
```

#### `justifyContent` (Main Axis Alignment)

* Controls **distribution along main axis**

```js
justifyContent: 'flex-start' | 'flex-end' | 'center' | 'space-between' | 'space-around' | 'space-evenly'
```

#### `alignItems` (Cross Axis Alignment)

* Controls **alignment along cross axis**

```js
alignItems: 'stretch' (default) | 'flex-start' | 'flex-end' | 'center' | 'baseline'
```

---

### Example: Row Layout with Justification and Alignment

```js
<View style={{
  flexDirection: 'row',
  justifyContent: 'space-between',
  alignItems: 'center',
  width: '80%',
  height: 300
}}>
  <View style={{ backgroundColor: 'red' }}>
    <Text>1</Text>
  </View>
  <View style={{ backgroundColor: 'blue' }}>
    <Text>2</Text>
  </View>
  <View style={{ backgroundColor: 'green' }}>
    <Text>3</Text>
  </View>
</View>
```

---

### Controlling Size with `flex`

* `flex` determines how a child **grows** in the available space along **main axis**
* `flex: 1` means “take all available space”
* Relative sizing:

  ```js
  flex: 1   // takes 1 portion
  flex: 2   // takes 2 portions
  flex: 3   // takes 3 portions
  ```
* Proportional allocation is based on total sum of `flex` values

#### Example

```js
<View style={{ flexDirection: 'row', width: '100%', height: 100 }}>
  <View style={{ flex: 1, backgroundColor: 'red' }} />
  <View style={{ flex: 2, backgroundColor: 'blue' }} />
</View>
```

* Blue takes twice the horizontal space as Red

---

### Nesting Flex Containers

* You can nest multiple `<View>`s, each using its own Flexbox layout
* Useful for creating **structured and responsive** layouts

```js
<View style={{ flex: 1 }}>
  <View style={{ flex: 2, flexDirection: 'row' }}>
    <View style={{ flex: 1 }} />
    <View style={{ flex: 1 }} />
  </View>
  <View style={{ flex: 1 }} />
</View>
```

---

### Notes

| Feature                | Behavior in React Native           |
| ---------------------- | ---------------------------------- |
| Default Layout System  | Flexbox                            |
| Default Direction      | `column`                           |
| Cannot disable Flexbox | It's always active in Views        |
| `justifyContent`       | Main axis alignment                |
| `alignItems`           | Cross axis alignment               |
| `flex` on child        | Controls growth on main axis       |
| Nesting Views          | Fully supported, each with Flexbox |

---

### Summary

* Flexbox is **central to layout** in React Native.
* Understand `flexDirection`, `justifyContent`, `alignItems`, and `flex`.
* Combine views and nest them to build complex UIs.
* Layouts are **deterministic and responsive**, with relative sizing handled via `flex`.

This understanding forms the foundation for almost all UI design and layout in React Native applications.
